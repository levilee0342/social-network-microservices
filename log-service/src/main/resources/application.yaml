server:
  port: 8085
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: false
spring:
  application:
    name: log-service
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  web:
    cors:
      allowed:
        origins: '*'
        methods: '*'
        headers: '*'
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: logging-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.example.log_service.entity,com.example.user_service.entity
        spring.json.value.default.type: com.example.log_service.entity.Log
service:
  identity:
    url: lb://identity-service/identity/validate
  post:
    url: lb://post-service/posts
  notification:
    url: lb://notification-service/notifications
  search:
    url: lb://search-service/search
logging:
  level:
    root: INFO
    com.example.log_service: DEBUG
management:
  endpoints:
    web:
      exposure:
        include: health,info