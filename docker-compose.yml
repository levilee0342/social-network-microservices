services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-net

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-net

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    container_name: elasticsearch
    environment:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - network.host=0.0.0.0
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2g
    networks:
      - app-net

  graylog:
    image: graylog/graylog:6.0
    container_name: graylog
    depends_on:
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      GRAYLOG_PASSWORD_SECRET: abcdefghijklmnop1234567890
      GRAYLOG_ROOT_PASSWORD_SHA2: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
      GRAYLOG_ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    entrypoint: >
      /usr/bin/tini --
      wait-for-it mongo:27017 --
      wait-for-it elasticsearch:9200 --
      /docker-entrypoint.sh
    ports:
      - "9000:9000"
      - "12201:12201/udp"
      - "12201:12201/tcp"
    networks:
      - app-net

  flink-jobmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink-java17
    image: flink-jobmanager-custom
    container_name: flink-jobmanager
    ports:
      - "8181:8081"
      - "6123:6123"
    command: jobmanager
    volumes:
      - ./jars:/jars
      - ./flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5

  flink-taskmanager:
    build:
      context: .
      dockerfile: Dockerfile.flink-java17
    image: flink-taskmanager-custom
    container_name: flink-taskmanager
    depends_on:
      flink-jobmanager:
        condition: service_healthy
    command: taskmanager
    volumes:
      - ./jars:/jars
      - ./flink-conf.yaml:/opt/flink/conf/flink-conf.yaml
    networks:
      - app-net

networks:
  app-net:
    driver: bridge
