package com.example.api_gateway.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;import org.springframework.security.config.web.server.ServerHttpSecurity;import org.springframework.security.web.server.SecurityWebFilterChain;import org.springframework.web.cors.reactive.CorsConfigurationSource;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;import org.springframework.web.cors.CorsConfiguration;import java.util.List;@Configuration@EnableWebFluxSecuritypublic class SecurityConfig {    private final JwtAuthenticationFilter jwtAuthenticationFilter;    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {        this.jwtAuthenticationFilter = jwtAuthenticationFilter;    }    @Bean    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {        http                .cors(cors -> cors.configurationSource(corsConfigurationSource()))                .csrf(ServerHttpSecurity.CsrfSpec::disable)                .authorizeExchange(exchange -> exchange                        .pathMatchers(                                "/identity/register",                                "/identity/login",                                "/identity/validate",                                "/identity/request-otp",                                "/ws-logs/**",                                "/ws-presence/**",                                "/ws-chat/**",                                "/oauth2/authorization/**",                                "/api/login/oauth2/code/**",                                "/address/**"                        ).permitAll()                        .pathMatchers("/logs/**").authenticated()                        .anyExchange().authenticated()                )                .addFilterAt(jwtAuthenticationFilter, org.springframework.security.config.web.server.SecurityWebFiltersOrder.AUTHENTICATION);        return http.build();    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(List.of(                "https://lolsocial-lake.vercel.app",                "http://localhost:5173"        ));        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));        configuration.setAllowedHeaders(List.of("Authorization", "Content-Type", "Accept"));        configuration.setAllowCredentials(true);        configuration.setMaxAge(3600L);        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }}